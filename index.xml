<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lianera&#39;s homepage</title>
    <link>https://lianera.github.io/</link>
    <description>Recent content on Lianera&#39;s homepage</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 23 Mar 2025 02:47:00 +0800</lastBuildDate>
    <atom:link href="https://lianera.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于</title>
      <link>https://lianera.github.io/about/</link>
      <pubDate>Sun, 23 Mar 2025 02:47:00 +0800</pubDate>
      <guid>https://lianera.github.io/about/</guid>
      <description>&lt;p&gt;游戏开发程序员，从业若干年，技术栈：C++、Python、图形学、Unity&lt;/p&gt;&#xA;&lt;p&gt;喜欢玩Minecraft、模拟城市&lt;/p&gt;&#xA;&lt;p&gt;平时忙于工作，博客更新频率较慢&lt;/p&gt;&#xA;&lt;p&gt;邮箱：&lt;img src=&#34;mail.svg&#34; alt=&#34;&#34;&gt;，微信：duanlian158&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于事件驱动的逻辑电路仿真实现</title>
      <link>https://lianera.github.io/post/2020/logic-sim/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2020/logic-sim/</guid>
      <description>&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;&#xA;&lt;p&gt;首先观察一个简单的电路：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;bVbHM2B.webp&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不难发现，根据信号的传导方向，可以将其转换成一个有向图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;bVbHM2L.webp&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中小写字母的顶点表示导线的结点，拥有电平状态，大写字母表示逻辑门，拥有逻辑运算的功能。&#xA;注意导线结点不能只作为边，因为可能会有多个逻辑门的端口连在一起，比如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>反汇编Minecraft基岩服务端，隐藏地图种子</title>
      <link>https://lianera.github.io/post/2019/bedrock-mc-crack/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2019/bedrock-mc-crack/</guid>
      <description>&lt;p&gt;应广大MC玩家的呼声，Mojang官方放出了基岩版的服务端程序：&lt;a href=&#34;https://www.minecraft.net/zh-hans/download/server/bedrock/&#34;&gt;https://www.minecraft.net/zh-hans/download/server/bedrock/&lt;/a&gt;&#xA;然而坑爹的是服务端竟然直接把地图种子传给客户端显示，玩过minecraft的都知道，有了种子就可以为所欲为了，对于多人服务器，这还玩啥……&lt;/p&gt;</description>
    </item>
    <item>
      <title>点云球心拟合</title>
      <link>https://lianera.github.io/post/2018/sphere-fitting/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2018/sphere-fitting/</guid>
      <description>&lt;p&gt;最近有人问怎么对球状的三维点云进行拟合，得到球心的位置和半径，对于这类问题，我首先想到的是二维图像中圆检测的方法霍夫变换，但是霍夫变换是在图像中进行的，而这是三维点云，如果是体素的话还有可能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>三路快速排序</title>
      <link>https://lianera.github.io/post/2018/three-way-quicksort/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2018/three-way-quicksort/</guid>
      <description>&lt;p&gt;最近需要解决一个2D绘制的遮挡问题，其中画家算法是比较常用的方法，很简单，就是模仿画家从远到近绘制，远处的就被遮挡了，所以需要做的其实是对2D物体的距离也就是z值进行排序。排序当然快排是首选，但是快排有个缺点是当元素相同的时候，复杂度就变成了O(n^2)，然而2D绘制中z值重复的现象太常见了。除了快排我第一想到的是用红黑树解决这个问题，这样可以一边插入一边排序，最坏情况下也是O(nlogn)。然而红黑树是比较复杂的，而我需要解决的问题只能用C语言。后面发现了一个更好的方法：三路快速排序。普通快速排序在进行划分的时候只划分成左右小于和大于的两个部分，而三路快速排序则考虑了相等元素的影响，划分的时候分成三个区间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速三线性插值</title>
      <link>https://lianera.github.io/post/2018/fast-trilinear-interpolation/</link>
      <pubDate>Wed, 25 Jul 2018 10:48:41 +0800</pubDate>
      <guid>https://lianera.github.io/post/2018/fast-trilinear-interpolation/</guid>
      <description>&lt;p&gt;最近需要对一个体素进行插值，并且应用到一张大图像上。这个本来用三线性插值很容易就实现了，但是体素的尺寸很小，长宽高大概20x15x10的大小，图像的尺寸非常大，差不多是4000x3000，等我实现完普通的三线性插值后，发现算法速度实在太慢，单是这一项三线性插值耗费的时间就占了总程序的一半多。其实如果能够用GPU，利用OpenGL里面的3d texture是最方便，也最快的，但是图像从内存传送到GPU需要耗费一定时间，并且很多情况下没法用GPU。所以只能推导一下，在体素上事先就进行预计算，然后再用参数应用到大图像上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DFT和DCT以及空间域的高斯滤波对比</title>
      <link>https://lianera.github.io/post/2018/frequency-gaussian/</link>
      <pubDate>Sat, 21 Jul 2018 15:48:41 +0800</pubDate>
      <guid>https://lianera.github.io/post/2018/frequency-gaussian/</guid>
      <description>&lt;p&gt;最近需要用到一个sigma很大的高斯滤波操作，如果在空间域里面用很大的kernel，其效率实在太低。对于这种情况，频率域更加适合。&lt;/p&gt;&#xA;&lt;h2 id=&#34;离散傅里叶变换dft&#34;&gt;离散傅里叶变换（DFT）&lt;/h2&gt;&#xA;&lt;p&gt;傅里叶变换本身的复杂度是O(n^2)，但是因为有了快速傅里叶变换，其复杂度可以达到O(nlogn)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>本征图像的合成</title>
      <link>https://lianera.github.io/post/2018/synthetic-intrinsic-images/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2018/synthetic-intrinsic-images/</guid>
      <description>&lt;p&gt;从现实世界直接获取照片及其本征图像基本上是不可能的事情，即使是现有最好的本征图像分解方法，分解出来的结果也很难让人满意。但是有个时候又经常需要用到比较准确的本征图像，最好的办法还是用3D软件来进行渲染。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速高斯模糊综述</title>
      <link>https://lianera.github.io/post/2017/fast-gaussian/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/fast-gaussian/</guid>
      <description>&lt;p&gt;高斯滤波的应用是非常广泛的，其原理是用高斯函数对原信号做卷积运算，得到一个平滑的信号。也即：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;f1.svg&#34; alt=&#34;g(x) = (f*h)(x)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中&lt;img src=&#34;f2.svg&#34; alt=&#34;f(x)&#34;&gt;为输入信号，&lt;img src=&#34;f3.svg&#34; alt=&#34;h(x)&#34;&gt;为高斯函数，&lt;img src=&#34;f4.svg&#34; alt=&#34;g(x)&#34;&gt;为输出信号，&lt;img src=&#34;f5.svg&#34; alt=&#34;h(x)=\frac{1}{\sqrt{2\pi}\sigma }e^{-\frac{x^2}{2\sigma^2}}&#34;&gt;。&#xA;而数字图像是二维有限的离散函数，因此只能用离散的卷积进行近似，常用的方法有以下这些：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magic Plain v2</title>
      <link>https://lianera.github.io/post/2017/magicplainv2/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/magicplainv2/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;menu.png&#34; alt=&#34;menu&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;levels.png&#34; alt=&#34;levels&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img src=&#34;playing.png&#34; alt=&#34;playing&#34;&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img src=&#34;victory.png&#34; alt=&#34;playing&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;一个类似炸弹超人的游戏，三年多前用Java写过第一版，这段时间用JavaScript结合&lt;a href=&#34;http://phaser.io/&#34;&gt;Phaser&lt;/a&gt;游戏引擎重写了一次。&lt;/p&gt;&#xA;&lt;h2 id=&#34;游戏设计&#34;&gt;游戏设计&lt;/h2&gt;&#xA;&lt;p&gt;游戏里面总共分为四幕，分别为草原、地下城、戈壁、雪地，以底色和砖块来进行区分，每一幕都有若干关卡，最终形成一个网状路径，通过最终关卡即算胜利。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RGB-D数据集的合成</title>
      <link>https://lianera.github.io/post/2017/synthetic-rgbd/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/synthetic-rgbd/</guid>
      <description>&lt;p&gt;在做三维重建的时候，经常需要用到一些RGB-D数据集来进行实验。而很多时候需要比较特殊的RGB-D数据，通过Kinect等深度设备获取的RGB-D数据往往很难达到理想的要求，而使用合成数据集则能够任意的构造数据集。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LtRay 开发备忘录</title>
      <link>https://lianera.github.io/post/2017/ltray-memo/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/ltray-memo/</guid>
      <description>&lt;h1 id=&#34;数学工具&#34;&gt;数学工具&lt;/h1&gt;&#xA;&lt;p&gt;工欲善其事，必先利其器！作为一个光线跟踪器，数学工具自然是少不了的。需要用到哪些数学工具呢？作为3D程序，点肯定是需要的，另外做变换也是少不了的，所以最基本的数学工具就是Vector、Point、Matrix。&lt;/p&gt;</description>
    </item>
    <item>
      <title>球谐光照（Spherical Harmonics Lighting）及其应用-应用篇</title>
      <link>https://lianera.github.io/post/2017/sh-lighting-apply/</link>
      <pubDate>Mon, 27 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/sh-lighting-apply/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://lianera.github.io/post/2016/sh-lighting-exp&#34;&gt;上一篇&lt;/a&gt;介绍了球谐函数的一些原理和性质，本篇主要介绍如何实现球谐光照，将这种光照应用到实际的场景中去。&lt;/p&gt;&#xA;&lt;p&gt;我们知道，球谐光照实际上就是将周围的环境光采样成几个系数，然后渲染的时候用这几个系数来对光照进行还原，这种过程可以看做是对周围环境光的简化，从而简化计算过程。因为如果按照采样的方法进行渲染，每次渲染的时候都得对周围环境采样，从而都会耗费大量的计算时间。所以球谐光照的实现可以分成两个部分，一是环境光贴图的采样和积分运算，生成球谐参数，二是利用球谐参数对模型进行渲染。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LtRay的艰难重构</title>
      <link>https://lianera.github.io/post/2017/ltray-refactoring/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/ltray-refactoring/</guid>
      <description>&lt;p&gt;从去年九月份开始，我就在着手实现一个光线跟踪器：&lt;a href=&#34;https://github.com/lianera/LtRay&#34;&gt;LtRay&lt;/a&gt;。刚开始进展很快，差不多三天的时间，光线跟踪器的雏形就已经具备了，能够对一些简单的图元比如球体、平面等进行渲染，并且还具有反射、阴影效果。但是越到后面，开发的进度就越来越慢了，近两个月几乎就是做些填补工作。现在每改一个地方，几乎就得花费一两天的时间来修复相关的代码。前不久刚定下&lt;a href=&#34;https://github.com/lianera/LtRay/releases/tag/v0.1.7&#34;&gt;v0.1.7&lt;/a&gt;版本，渲染的效果如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;ltray.png&#34; alt=&#34;ltray&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;而这跟我两个月前的版本相比，几乎就只是把光线跟踪的核心分离出来，另外把场景文件的格式从json改成了toml。每遇到一个问题，我都在纠结到底该哪一种方式来解决，实际上，这种犹豫耗费了大量的时间。摆在我面前的方法仿佛有无数种，但就是没法确定哪一种是最好的，结果就是反复修改来修改去，比如我遇到的有这些坑：&lt;/p&gt;</description>
    </item>
    <item>
      <title>复杂多元复合函数的导数和雅克比矩阵</title>
      <link>https://lianera.github.io/post/2017/complicated-compound-derivative/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/complicated-compound-derivative/</guid>
      <description>&lt;p&gt;我们知道对于复合函数的导数，可以使用链式法则求得。对于多元的复合函数来说，也可以用同样的方法求得梯度或者雅克比矩阵，但是如果复合函数涉及到的变元比较多，并且复合的层数也比较多，这样复杂度就会大大增加。&lt;/p&gt;</description>
    </item>
    <item>
      <title>梯度下降法及其实现</title>
      <link>https://lianera.github.io/post/2017/gradient-descent/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2017/gradient-descent/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;本文主要介绍了梯度下降法的原理和方法，结合二次型的具体实例来阐述梯度下降的过程，使用三维可视化技术实现了一个梯度下降的演示程序。&lt;/p&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;梯度下降法是一种最优化算法，在最优化理论里面也叫最速下降法，在常用的优化算法当中算是最简单的一种算法了。一般来说求解优化问题根据具体情况有很多其他更好的办法，不过下降法思想是其他大多数优化迭代算法的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>球谐光照（Spherical Harmonics Lighting）及其应用-实验篇</title>
      <link>https://lianera.github.io/post/2016/sh-lighting-exp/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2016/sh-lighting-exp/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;之前在一篇实时深度图优化的论文中看到球谐光照（Spherical Harmonics Lighting）的应用，在查阅了许许多多资料之后还是无法完全理解，我个人觉得如果之前对实时渲染技术不是很了解的话，球谐光照还是有一定难度的。大多数的资料都是从原理上描述球谐函数及其光照过程，而没有对具体的应用做解释，我直到真正动手实现了一遍球谐光照之后，才完全理解球谐光照具体的过程以及作用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NFA转DFA-json数字识别</title>
      <link>https://lianera.github.io/post/2016/nfa-to-dfa/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2016/nfa-to-dfa/</guid>
      <description>&lt;p&gt;json的主页上，提供了number类型的符号识别过程，如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;json.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图片引用：http://www.json.org/json-zh.html&#xA;实际上这张图片表示的是一个状态机，只是状态没有标出来。因为这个状态机上存在ε转换，所以它是一个NFA（不确定有限自动机）。ε转换也即不需要输入串就能进行的转换，例如从开始状态到0之前的状态。而我们进行识别的时候，使用DFA（确定有穷自动机）会简单方便得多。所以首先应该将这个NFA转成DFA。&#xA;首先把这个NFA规范一下，写成状态与箭头的形式：&lt;/p&gt;</description>
    </item>
    <item>
      <title>海水截面模拟</title>
      <link>https://lianera.github.io/post/2016/ocean-sectional/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2016/ocean-sectional/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;ocean-sectional.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;一个简单的海水模型截面视图的模拟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;预览&#34;&gt;预览&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lianera.github.io/assets/wave.html&#34;&gt;预览页面&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;建模&#34;&gt;建模&lt;/h2&gt;&#xA;&lt;p&gt;我们假设水的传播是一个振动模型（实际上并不是，为了简便），它的函数可以写成：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;f1.svg&#34; alt=&#34;y(t)=A*sin(2\pi ft+\phi)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中&lt;img src=&#34;f2.svg&#34; alt=&#34;f&#34;&gt;是水波的振动频率，&lt;img src=&#34;f3.svg&#34; alt=&#34;\phi&#34;&gt;是相位。&#xA;假设在平面&lt;img src=&#34;f4.svg&#34; alt=&#34;\sigma&#34;&gt;上有个振动源&lt;img src=&#34;f5.svg&#34; alt=&#34;{S_i(x_i,y_i)}&#34;&gt; 和一个目标点&lt;img src=&#34;f6.svg&#34; alt=&#34;T(x_0,y_0)&#34;&gt;，我们可以推导出&lt;img src=&#34;f6.svg&#34; alt=&#34;T(x_0,y_0)&#34;&gt;位置的振动幅度为：&lt;/p&gt;</description>
    </item>
    <item>
      <title>多图片平均法降噪</title>
      <link>https://lianera.github.io/post/2015/average-denoise/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2015/average-denoise/</guid>
      <description>&lt;h2 id=&#34;理论&#34;&gt;理论&lt;/h2&gt;&#xA;&lt;p&gt;在相机采集到的图像中，往往会存在一定的噪声。这种噪声一般来说在空间域是互不相关的，并且是一种加性噪声。对于一幅相机采集到的图像，可以表示为无噪声图像和加性噪声的组成，也即：&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于计算机视觉的虚拟鼠标</title>
      <link>https://lianera.github.io/post/2015/cv-mouse/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2015/cv-mouse/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;设计内容&#34;&gt;设计内容&lt;/h3&gt;&#xA;&lt;p&gt;设备驱动程序设计, 要求如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计Windows XP或者Linux操作系统下的设备驱动程序；&lt;/li&gt;&#xA;&lt;li&gt;设备类型可以是字符设备、块设备或者网络设备；&lt;/li&gt;&#xA;&lt;li&gt;设备可以是虚拟的也可以是实际设备；&lt;/li&gt;&#xA;&lt;li&gt;编写测试应用程序，测试对该设备的读写等操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;功能需求&#34;&gt;功能需求&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现鼠标驱动程序，并提供接口。&lt;/li&gt;&#xA;&lt;li&gt;通过手势控制指针的移动。&lt;/li&gt;&#xA;&lt;li&gt;手上可用颜色块标定。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基本概念和原理&#34;&gt;基本概念和原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;环境选择和工具&#34;&gt;环境选择和工具&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统：Ubuntu(Linux) 14.04 LTS 64bit&lt;/li&gt;&#xA;&lt;li&gt;编辑器：vim&lt;/li&gt;&#xA;&lt;li&gt;编译器：gcc，g++&lt;/li&gt;&#xA;&lt;li&gt;调试器：gdb&lt;/li&gt;&#xA;&lt;li&gt;开发库：opencv&lt;/li&gt;&#xA;&lt;li&gt;其他：make&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;基本架构&#34;&gt;基本架构&lt;/h3&gt;&#xA;&lt;p&gt;用附加程序通过计算机视觉技术，获取目标的位置，并用虚拟鼠标驱动实现鼠标位置的控制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sudoku</title>
      <link>https://lianera.github.io/post/2015/sudoku/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2015/sudoku/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;sudoku.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;sudoku2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;sudoku3.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;数独程序，解题的目的是根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫内的数字均含1-9，不重复。&lt;/p&gt;</description>
    </item>
    <item>
      <title>简单CPU设计实践</title>
      <link>https://lianera.github.io/post/2014/cpu-step-by-step/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2014/cpu-step-by-step/</guid>
      <description>&lt;h2 id=&#34;开始前的话&#34;&gt;开始前的话&lt;/h2&gt;&#xA;&lt;p&gt;本文将从零开始介绍处理器的基本原理和架构，并且用简单的电路搭建方式实现一个非常简单的8 bit CPU。由于数字电路内容参考资料众多，并且大多数专业开设过数字电路，所以在此略过数电的知识，如果对数电有些不明白的，可以参考其他数电教程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Game2048</title>
      <link>https://lianera.github.io/post/2014/game2048/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2014/game2048/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;game2048.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;game2048_1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;这是一个用Java写的实现2048游戏的程序，加入了人工智能，能够自动运行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;项目引入MVC架构的思想，将逻辑与界面分离。这个程序的难点在于AI算法，刚开始我的想法是用Alpha-Beta剪枝算法，但是效果不是很好，后面又改用了贪婪算法，虽然贪婪算法简单，但是结果并没有明显变差，重要的是评估函数的设定。评估函数的指标设置有：总的分数、总的步数、空格数、最大的离中心的距离、相邻数之差。经过多次的实验和指标权重的调整，使得评估的结果有了提升。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TFT液晶屏Linux下的移植</title>
      <link>https://lianera.github.io/post/2014/transplant-tft/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2014/transplant-tft/</guid>
      <description>&lt;h2 id=&#34;预览&#34;&gt;预览&lt;/h2&gt;&#xA;&lt;p&gt;手上有个TFT液晶屏,正好我的树莓派缺一个显示器,所以便萌发了这个移植的想法,以便物尽其用｡以下是效果图:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;tft_7.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;tft_0.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;tft_10.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;tft_6.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;声明&#34;&gt;声明&lt;/h2&gt;&#xA;&lt;p&gt;这个教程只是提供一个思路,不能保证所有的TFT屏幕都能成功｡移植过程涉及许多技术问题,比较繁琐复杂,如果怕麻烦建议还是购买现成的VGA/HDMI显示器｡但是,过程远远比结果更有意义,因为这能提升你的技术水平和解决问题的能力｡&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magic Plain</title>
      <link>https://lianera.github.io/post/2013/magicplain/</link>
      <pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2013/magicplain/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;magicplain1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;magicplain2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;img src=&#34;magicplain3.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;img src=&#34;magicplain4.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;一个用Java写的2D的游戏，类似于炸弹超人，不过比炸弹超人内容更加丰富。不仅道具的种类很多，而且炸弹爆炸效果也是多种多样的。游戏设置了多个场景，十六张地图，每个场景的道具都不相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>贪吃蛇（二）</title>
      <link>https://lianera.github.io/post/2013/snake2/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2013/snake2/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;snake2_menu.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;snake2_1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;snake2_2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;传统的贪吃蛇游戏，实现蛇的移动、进食、增长以及死亡过程，并统计所得分数。游戏面板划分为许多小格，蛇移动时每次只移动一格。食物随机放置，但不能放到蛇身。每进食一次，蛇身增长一格，得分相应增加。蛇碰到边界时转到对面边界出来。当蛇头碰到自身时，蛇死亡，游戏结束。&lt;/p&gt;</description>
    </item>
    <item>
      <title>贴吧用户ID挖掘机</title>
      <link>https://lianera.github.io/post/2012/tiebadigger/</link>
      <pubDate>Sun, 23 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2012/tiebadigger/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;TiebaDigger.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;TiebaDigger2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;这是一个用来挖掘贴吧用户ID的程序，能够将某个贴吧的所有用户名都按格式记录下来，可用于@大量用户。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;程序用C语言写成的，使用Windows网络编程。采用socket通信发出get请求，返回含有贴吧ID的页面，得到页面源码后，程序对其进行解析，提取ID信息并格式化保存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>装甲之战</title>
      <link>https://lianera.github.io/post/2012/panzerwar/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2012/panzerwar/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;panzerwar1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;panzerwar2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;坦克游戏，通过控制坦克消灭敌人获取胜利。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;这个程序也是刚学C的时候做的，一边学C一边参考Windows API写程序。程序采用的是纯Windows编程，没有涉及MFC。游戏的架构就是典型的GameLoop实时游戏架构，采用Windows GDI进行绘图，同时在绘图上也采用了双缓存技术。这个程序由于没有采用模块化的方法，导致函数过多，后期维护混乱。不过最后还是成功做好了！&lt;/p&gt;</description>
    </item>
    <item>
      <title>俄罗斯方块（二）</title>
      <link>https://lianera.github.io/post/2012/blockgame/</link>
      <pubDate>Tue, 20 Nov 2012 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2012/blockgame/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;blockgame1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;blockgame2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;blockgame3.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;俄罗斯方块游戏。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;纯控制台程序，画面全部由字符组成，具有存档功能。&lt;/p&gt;&#xA;&lt;p&gt;在刚刚学C语言的时候写的。那个时候分模块的概念不是很强，所有函数写在一个文件里面，使得代码有些乱。怀着完美主义的精神写的，做得很细致，就连界面的那几个英文字母都是用字符一个个堆起来的。虽然花了几天时间才做成，不过那时候觉得能做出一点东西挺高兴的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>俄罗斯方块（一）</title>
      <link>https://lianera.github.io/post/2008/tetris/</link>
      <pubDate>Wed, 26 Nov 2008 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2008/tetris/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;tetris.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;经典的俄罗斯方块。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;中学时期作品，使用了双缓存技术。那时觉得程序无所不能，虽然对程序的认识比较肤浅，但总想做一些东西出来，这个程序采用的是MFC，结合Windows的绘图技术做成的。绘图方面使用了双缓存技术提高画面的流畅度，避免闪烁。&lt;/p&gt;</description>
    </item>
    <item>
      <title>贪吃蛇（一）</title>
      <link>https://lianera.github.io/post/2008/snake1/</link>
      <pubDate>Wed, 26 Nov 2008 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2008/snake1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;snake1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;经典的贪吃蛇小游戏。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;程序采用了OOP和模块化的思想，使得逻辑比较清晰，不过虽然是面向对象设计的，但也只是简单地建立类，并没有充分利用面向对象的特性。此外，界面与逻辑没有实现分离，导致程序的可重用性很低。采用Windows编程构造窗口界面，基于实时游戏的框架，利用消息处理机制处理用户输入，用定时器的方法按一定时间间隔刷新游戏内容并更新界面。游戏背景音乐采用MIDI，音效采用wav。&lt;/p&gt;</description>
    </item>
    <item>
      <title>按键助手</title>
      <link>https://lianera.github.io/post/2008/keyhelper/</link>
      <pubDate>Sun, 12 Oct 2008 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2008/keyhelper/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;keyhelper.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;一个类似于按键精灵的程序，能够录制鼠标和键盘的动作，定义和编辑动作，播放动作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;&#xA;&lt;p&gt;这个程序还是中学时期写的，那个时候对程序非常感兴趣，自学了一些C++便觉得自己可以写一些东西出来。虽然当时水平比较低，但是完全能够凭着热情去完成每一个程序。那个时候很喜欢写跟界面有关的东西，认知也停留在桌面应用上面，以为程序就是用来开发桌面应用的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

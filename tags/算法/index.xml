<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Lianera&#39;s homepage</title>
    <link>https://lianera.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Lianera&#39;s homepage</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Sep 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lianera.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>点云球心拟合</title>
      <link>https://lianera.github.io/post/2018/sphere-fitting/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2018/sphere-fitting/</guid>
      <description>&lt;p&gt;最近有人问怎么对球状的三维点云进行拟合，得到球心的位置和半径，对于这类问题，我首先想到的是二维图像中圆检测的方法霍夫变换，但是霍夫变换是在图像中进行的，而这是三维点云，如果是体素的话还有可能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>三路快速排序</title>
      <link>https://lianera.github.io/post/2018/three-way-quicksort/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://lianera.github.io/post/2018/three-way-quicksort/</guid>
      <description>&lt;p&gt;最近需要解决一个2D绘制的遮挡问题，其中画家算法是比较常用的方法，很简单，就是模仿画家从远到近绘制，远处的就被遮挡了，所以需要做的其实是对2D物体的距离也就是z值进行排序。排序当然快排是首选，但是快排有个缺点是当元素相同的时候，复杂度就变成了O(n^2)，然而2D绘制中z值重复的现象太常见了。除了快排我第一想到的是用红黑树解决这个问题，这样可以一边插入一边排序，最坏情况下也是O(nlogn)。然而红黑树是比较复杂的，而我需要解决的问题只能用C语言。后面发现了一个更好的方法：三路快速排序。普通快速排序在进行划分的时候只划分成左右小于和大于的两个部分，而三路快速排序则考虑了相等元素的影响，划分的时候分成三个区间。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
